// The Riptide language grammar.
//
// This file is used both to generate the parser, and serves as the canonical
// specification for the language syntax.

// A program string. Like a block without surrounding curly braces or params.
// "SOI" and "EOI" refer to the start and end of the file, respectively.
program = { SOI ~ statement_list ~ EOI }

// Blocks are surrounded by curly braces, with an optional square bracket
// delimited parameter list proceeding it.
block = { block_params? ~ "{" ~ statement_list ~ "}" }
block_params = { "<" ~ block_params_list ~ ">" }
block_params_list = _{
    vararg_param_decl
    | param_decl ~ block_params_list?
}

param_decl = { symbol }
vararg_param_decl = { "..." ~ symbol }

// Blocks and programs are lists of statements.
statement_list = { statement_separator* ~ (statement ~ (statement_separator+ ~ statement)*)? ~ statement_separator* }
statement_separator = _{ NEWLINE | ";" }

// A statement can be either an assignment or a pipeline.
statement = _{ import_statement | assignment_statement | pipeline_statement }

import_statement = { "import" ~ string_literal ~ "for" ~ string_literal+ }

assignment_statement = { assignment_target ~ "=" ~ expr }

// An expression used as the target of an assignment statement.
assignment_target = {
    member_access_expr
    | &"$" ~ variable_substitution
}

pipeline_statement = { pipeline }

// Expression is the main syntax building block.
expr = {
    member_access_expr
    | atomic_expr
}
atomic_expr = _{
    block
    | "(" ~ pipeline ~ ")"
    | cvar_scope
    | cvar
    | substitution
    | table_literal
    | list_literal
    | number_literal
    | interpolated_string
    | string_literal
}

member_access_expr = { atomic_expr ~ (member_operator ~ string_literal)+ }

// Pipelines are function calls chained together with the pipe "|" operator.
//
// The "!" prefix forces insignificant whitespace back on, which allows
// whitespace in a pipeline inside substitutions.
pipeline = !{ call ~ ("|" ~ call)* }

// A function call is a reference to a function followed by a series of argument
// expressions.
call = { named_call | unnamed_call }
named_call = { string_literal ~ expr* }
unnamed_call = { expr+ }

// Reference a context variable.
cvar = ${ "@" ~ string_literal }

// Binds a context variable to a value for the duration of a scope.
cvar_scope = { "let" ~ cvar ~ "=" ~ expr ~ block }

// Dollar sign indicates the start of some form of substitution.
substitution = ${ &"$" ~ (
    format_substitution
    | pipeline_substitution
    | variable_substitution
) }
format_substitution = ${ "${" ~ string_literal ~ (format_flags_separator ~ format_substitution_flags)? ~ "}" }
format_substitution_flags = ${ (ASCII_ALPHANUMERIC | "_" | ".")+ }
pipeline_substitution = ${ "$(" ~ pipeline ~ ")" }
variable_substitution = ${ "$" ~ string_literal }

// A table literal expression is used to create tables declaratively.
table_literal = { "[" ~ NEWLINE* ~ ((table_literal_entry ~ NEWLINE*)+ | ":") ~ NEWLINE* ~ "]" }
table_literal_entry = { expr ~ ":" ~ expr }

// A list literal creates a list declaratively from a sequence of expressions.
list_literal = { "[" ~ (NEWLINE* ~ expr)* ~ NEWLINE* ~ "]" }

// An interpolated string is surrounded by double quotes, and is made up of a
// sequence of parts that, when stringified and concatenated in order, form the
// desired string value.
//
// Escapes are handled later in the parser pipeline.
interpolated_string = ${ "\"" ~ interpolated_string_part* ~ "\"" }
interpolated_string_part = ${ substitution | interpolated_string_literal_part }
interpolated_string_literal_part = ${ ("\\\"" | "\\$" | !"\"" ~ !"$" ~ ANY)+ }

// A literal string. String literals are static and have no runtime
// interpolation.
// Escapes are handled later in the parser pipeline.
string_literal = ${ "'" ~ single_quote_inner ~ "'" | symbol }
single_quote_inner = ${ ("\\'" | !"'" ~ ANY)* }

// Numbers are floating point.
number_literal = ${ "-"? ~ ("." ~ ASCII_DIGIT+ | ASCII_DIGIT+ ~ ("." ~ ASCII_DIGIT+)?) }

// A symbol is an unquoted string, usually used for identifying variable names.
symbol_char = _{ ASCII_ALPHANUMERIC | "_" | "-" | "?" | "!" | "." | "/" }
symbol = ${ !reserved_words ~ symbol_char ~ (!member_operator ~ symbol_char)* }

// A list of keywords that are not allowed as bare identifiers because they have
// special meaning.
reserved_words = _{ "import" | "let" }

// Operator to access namespaces and table members.
member_operator = _{ "->" }

// Separator for specifying format parameters.
format_flags_separator = _{ ":" }

// Inline comments are similar to UNIX shells, where "#" starts a comment and
// includes all following characters until end of line.
COMMENT = _{ "#" ~ (!NEWLINE ~ ANY)* }

// Only horizontal whitespace is insignificant; vertical whitespace is used to
// separate staements in blocks.
WHITESPACE = _{ " " | "\t" | "\\" ~ NEWLINE }
